#pragma once

#include <vector>
#include <chrono>
#include <random>
#include "geometry/model/point.h"
#include "geometry/model/segment.h"


namespace geometry
{
#define clock std::chrono::system_clock
#define time_seed (clock::now().time_since_epoch().count() % 1000000)

	/*!
	 * A Number_generator will generate random numbers using a normal
	 * distribution. A seed can be provided to the constructor, by default it is
	 * determined by the clock
	 */
	class Number_generator
	{
		typedef double dist_number;

	public:
		explicit Number_generator(unsigned long seed = time_seed);

		/**
		 * @return a number following a normal distribution on [inf, sup]
		 */
		real next_number(const dist_number& inf = -50,
						 const dist_number& sup = 50);

	private:
		std::default_random_engine generator;
		std::normal_distribution<dist_number> distribution;
	};

	/*!
	 * @return a random point generated by ng
	 */
	point random_point_2(Number_generator& ng);
	/*!
	 * @return a random segment generated by ng
	 */
	segment random_segment_2(Number_generator& ng);
	/*!
	 * @return a random point vector generated by ng
	 */
	std::vector<point> random_point_2_set(unsigned n,
										  Number_generator& ng);
	/*!
	 * @return a random segment vector generated by ng
	 */
	std::vector<segment> random_segment_2_set(unsigned n,
											  Number_generator& ng);
}