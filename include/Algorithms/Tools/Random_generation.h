#pragma once

/** @cond */
#include <vector>
#include <chrono>
#include <random>
/** @endcond */
#include "Algorithms/Model/Segment_2.h"


namespace algorithms
{
#define clock std::chrono::system_clock
#define time_seed (clock::now().time_since_epoch().count() % 1000000)

	template<typename Real>
	class Number_generator
	{
	protected:
		typedef double dist_number;

	public:
		virtual Real next_number(const dist_number& inf = -50,
								 const dist_number& sup = 50) = 0;
	};

	template<typename Real>
	class Normal_number_generator : public Number_generator<Real>
	{
		typedef typename Number_generator<Real>::dist_number dist_number;

	public:
		explicit Normal_number_generator(unsigned long seed = time_seed);

		/**
		 * Let a be a random real generated by a normal centered reduced law
		 * Returns inf + a (sup - inf)
		 * @param inf
		 * @param sup
		 * @return
		 */
		Real next_number(const dist_number& inf = -50,
						 const dist_number& sup = 50) override;

	private:
		std::default_random_engine generator;
		std::normal_distribution<dist_number> distribution;
	};

	template<typename Real>
	Point_2<Real> random_point_2(Number_generator<Real>& ng);
	template<typename Real>
	std::vector<Point_2<Real>>
	random_point_2_set(unsigned n,
					   Number_generator<Real>& ng);
	template<typename Real>
	Segment_2<Real> random_segment_2(Number_generator<Real>& ng);


	// +-----------------------------------------------------------------------+
	// |                         TEMPLATE DEFINITIONS                          |
	// +-----------------------------------------------------------------------+
	template<typename Real>
	std::vector<Segment_2<Real>>
	random_segment_2_set(unsigned n,
						 Number_generator<Real>& ng);

	template<typename Real>
	Normal_number_generator<Real>::Normal_number_generator(unsigned long seed):
			generator(std::default_random_engine(seed)),
			distribution(std::normal_distribution<dist_number>(0, 1))
	{}

	template<typename Real>
	Real Normal_number_generator<Real>::next_number(const dist_number& inf,
													const dist_number& sup)
	{
		dist_number a = distribution(generator);
		return Real(inf + a * (sup - inf));
	}

	template<typename Real>
	Point_2<Real> random_point_2(Number_generator<Real>& ng)
	{
		Real x = ng.next_number();
		Real y = ng.next_number();
		return Point_2<Real>(x, y);
	}

	template<typename Real>
	std::vector<Point_2<Real>> random_point_2_set(unsigned n,
												  Number_generator<Real>& ng)
	{
		std::vector<Point_2<Real>> points;
		for (unsigned i = 0; i < n; ++i)
		{
			points.push_back(random_point_2<Real>(ng));
		}
		return points;
	}

	template<typename Real>
	Segment_2<Real> random_segment_2(Number_generator<Real>& ng)
	{
		return Segment_2<Real>(random_point_2(ng), random_point_2(ng));
	}

	template<typename Real>
	std::vector<Segment_2<Real>>
	random_segment_2_set(unsigned n,
						 Number_generator<Real>& ng)
	{
		std::vector<Segment_2<Real>> segments;
		for (unsigned i = 0; i < n; ++i)
		{
			segments.push_back(random_segment_2<Real>(ng));
		}
		return segments;
	}
}