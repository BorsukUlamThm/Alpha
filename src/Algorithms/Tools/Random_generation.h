#ifndef ALPHA_RANDOM_GENERATION_H
#define ALPHA_RANDOM_GENERATION_H

#include "Algorithms/Model/Point_2.h"

#include <vector>
#include <chrono>
#include <random>


namespace alg
{
#define time_seed (std::chrono::system_clock::now().time_since_epoch().count() % 1000000)

template <typename Real>
class Number_generator
{
public:
    virtual Real next_number(const Real& inf = -50,
                             const Real& sup = 50) = 0;
};

template <typename number>
class Normal_number_generator: public Number_generator<number>
{
    typedef double dist_number;

public:
    Normal_number_generator(unsigned long seed = time_seed);

    /**
     * Let a be a random real generated by a normal centered reduced law
     * Returns inf + a (sup - inf)
     * @param inf
     * @param sup
     * @return
     */
    number next_number(const number& inf = -50,
                       const number& sup = 50) override;

private:
    std::default_random_engine generator;
    std::normal_distribution<dist_number> distribution;
};
template <typename Real>
Point_2<Real> random_point_2(Number_generator<Real>& ng);
template <typename Real>
std::vector<Point_2<Real>>
random_point_2_set(unsigned n, Number_generator<Real>& ng);
template <typename Real>
Segment_2<Real> random_segment_2(Number_generator<Real>& ng);
template <typename Real>
std::vector<Segment_2<Real>>
random_segment_2_set(unsigned n, Number_generator<Real>& ng);

template <typename number>
Normal_number_generator<number>::Normal_number_generator(unsigned long seed):
        generator(std::default_random_engine(seed)),
        distribution(std::normal_distribution<dist_number>(0, 1))
{}

template <typename number>
number Normal_number_generator<number>::next_number(const number& inf, const number& sup)
{
    dist_number a = distribution(generator);
    return number(inf + a * (sup - inf));
}

template <typename Real>
Point_2<Real> random_point_2(Number_generator<Real>& ng)
{
    Real x = ng.next_number();
    Real y = ng.next_number();
    return Point_2<Real>(x, y);
}

template <typename Real>
std::vector<Point_2<Real>> random_point_2_set(unsigned n,
                                              Number_generator<Real>& ng)
{
    std::vector<Point_2<Real>> points;
    for(unsigned i = 0; i < n; ++i)
    {
        points.push_back(random_point_2<Real>(ng));
    }
    return points;
}

template <typename Real>
Segment_2<Real> random_segment_2(Number_generator<Real>& ng)
{
    return Point_2<Real>(random_point_2(ng), random_point_2(ng));
}

template <typename Real>
std::vector<Segment_2<Real>> random_segment_2_set(unsigned n,
                                                  Number_generator<Real>& ng)
{
    std::vector<Segment_2<Real>> segments;
    for(unsigned i = 0; i < n; ++i)
    {
        segments.push_back(random_segment_2<Real>(ng));
    }
    return segments;
}
}

#endif //ALPHA_RANDOM_GENERATION_H
